pipeline {
  agent {
    label "java"
  }
  
  environment {
   // EXECUTOR_NUMBER = env.EXECUTOR_NUMBER
   // NODE_NAME = env.NODE_NAME
  //  NODE_NAME: 'java'
   // NODE_NAME: 'tomcat'
   // JOB_NAME  = env.JOB_NAME
   // BUILD_NUMBER = env.BUILD_NUMBER
   // BUILD_URL = env.BUILD_URL
    EMAIL_RECIPIENTS = 'pramodprasanna17@gmail.com'
    PATH = "/opt/apache-maven-3.9.2/bin:${PATH}"
    NEXUS_URL = 'http://44.210.124.40:8081/repository/maven-releases/'
    NEXUS_CREDENTIALS = credentials('jenkins-nexus') // Jenkins credentials for Nexus
    GROUP_ID = 'com.maven'
    ARTIFACT_ID = 'SimpleWebApplication'
    VERSION = '9.1.14'
    //WAR_FILE_NAME = "SimpleWebApplication.war"
    //WAR_FILE_NAME = "${ARTIFACT_ID}-${VERSION}.war"
    //TOMCAT_CREDENTIALS = credentials('tomcat-password')
    //TOMCAT_URL = 'http://54.198.88.98:8080/'
    //TOMCAT_WEBAPPS_DIR = '/opt/tomcat/apache-tomcat-10.1.30/webapps/' // Define your Tomcat webapps directory here
    //WORKSPACE = '/home/tomcat/workspace/Javawebappproject/'
    NEXUSUSER_NAME = 'admin'
    NEXUS_PASSWORD = 'admin12'
  }
  
  stages {
    stage('Build') {
          //echo "Building on node ${NODE_NAME} with executor ${EXECUTOR_NUMBER}"
           // echo "Building job ${env.JOB_NAME} (#${env.BUILD_NUMBER}) at ${env.BUILD_URL}"
      steps {
        sh 'mvn clean install'
      }
    }

    stage('Jacoco') {
      steps {
        jacoco()
      }
    }

    stage('SonarQube Analysis') {
      steps {
        script {
          def scannerHome = tool 'sonarqubescanner'
          withSonarQubeEnv('sonarqube') {
            sh """
              ${scannerHome}/bin/sonar-scanner \
              -Dsonar.projectKey=javawebappproject \
              -Dsonar.projectName=javawebappproject \
              -Dsonar.projectVersion=1.0 \
              -Dsonar.java.binaries='target/classes'
            """
          }
        }
      }
    }

    stage("Sonar Quality Gate Check") {
      steps {
        timeout(time: 1, unit: 'HOURS') {
          script {
            def qualityGate = waitForQualityGate()
            if (qualityGate.status != 'OK') {
              error "Pipeline aborted due to quality gate failure: ${qualityGate.status}"
            }
          }
        }
      }
    }

    stage('Upload to Nexus') {
      steps {
        nexusArtifactUploader artifacts: [[
          artifactId: 'SimpleWebApplication', 
          classifier: '', 
          file: 'target/SimpleWebApplication.war', 
          type: 'war'
        ]], 
        credentialsId: 'jenkins-nexus', 
        groupId: 'com.maven', 
        nexusUrl: '44.210.124.40:8081', // Ensure protocol is included
        nexusVersion: 'nexus3', 
        protocol: 'http', 
        repository: 'maven-releases', 
        version: '9.1.14'
      }
    }

    stage('Launchthe application') {
    agent {
        label "ansibleserver1"
    }
    steps {
	script {
 	  	sh """
                ansible-playbook /etc/ansible/deploy.yml -i /etc/ansible/hosts
            """
           }
        }
     }
    }
}
